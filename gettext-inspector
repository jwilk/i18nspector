#!/usr/bin/python3

# Copyright © 2012 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import os
import shutil
import subprocess as ipc
import sys
import tempfile

from lib import checker
from lib import encodings
from lib import gettext
from lib import ling
from lib import tags

def require_python(*version):
    if sys.version_info < version:
        prog = argparse.ArgumentParser().prog
        print('{prog}: error: Python >= {ver} is required'.format(
            prog=prog,
            ver='.'.join(map(str, version))
        ))
        sys.exit(1)

class Checker(checker.Checker):

    def debug(self, message, *extra):
        if self.options.debug:
            print('N:', message, *extra)

    def tag(self, tagname, *extra):
        if tagname in self.options.ignore_tags:
            return
        tag = self.options.taginfo[tagname]
        s = tag.format(self.fake_path, *extra, color=sys.stdout.isatty())
        print(s)

def check_file(filename, *, options):
    checker_instance = Checker(filename, options=options)
    checker_instance.check()

def copy_options(options, **update):
    kwargs = vars(options)
    kwargs.update(update)
    return argparse.Namespace(**kwargs)

class UnsupportedFileType(ValueError):
    pass

def check_deb(filename, *, options):
    if filename.endswith('.deb'):
        binary = True
    elif filename.endswith('.dsc'):
        binary = False
    else:
        raise UnsupportedFileType
    tmpdir = tempfile.mkdtemp()
    ignore_tags = set(options.ignore_tags)
    ignore_tags.add('unknown-file-type')
    try:
        if binary:
            ipc.check_call(['dpkg-deb', '-x', filename, tmpdir])
            control_dir = os.path.join(tmpdir, 'DEBIAN')
            os.mkdir(control_dir)
            ipc.check_call(['dpkg-deb', '-e', filename, control_dir])
            real_root = os.path.join(tmpdir, '')
        else:
            real_root = os.path.join(tmpdir, 's', '')
            with open(os.devnull) as bitbucket:
                ipc.check_call(
                    ['dpkg-source', '--no-copy', '--no-check', '-x', filename, real_root],
                    stdout=bitbucket # dpkg-source would be noisy without this...
                )
        options = copy_options(options,
            ignore_tags=ignore_tags,
            fake_root=(real_root, os.path.join(filename, ''))
        )
        for root, dirs, files in os.walk(tmpdir):
            for path in files:
                path = os.path.join(root, path)
                if os.path.islink(path):
                    continue
                if os.path.isfile(path):
                    check_file(path, options=options)
    finally:
        shutil.rmtree(tmpdir)

def main():
    require_python(3, 2)
    is_debian = os.path.exists('/etc/debian_version')
    ap = argparse.ArgumentParser()
    ap.add_argument('-l', '--language', metavar='<lang>')
    ap.add_argument('--debian', action='store_true', default=is_debian)
    ap.add_argument('--debug', action='store_true')
    ap.add_argument('files', metavar='<file>', nargs='+')
    options = ap.parse_args()
    files = options.files
    del options.files
    datadir = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        'data', ''
    )
    os.stat(datadir)
    options.encinfo = encinfo = encodings.EncodingInfo(datadir)
    options.gettextinfo = gettext.GettextInfo(datadir)
    options.linginfo = linginfo = ling.LingInfo(datadir)
    options.taginfo = tags.TagInfo(datadir)
    if options.language is not None:
        try:
            language = linginfo.parse_language(options.language)
            language.fix_codes()
        except ling.LanguageError:
            if options.debug:
                raise
            ap.error('invalid language')
        language.remove_encoding()
        language.remove_nonlinguistic_modifier()
        options.language = language
    options.ignore_tags = set()
    options.fake_root = None
    Checker.patch_environment(encinfo)
    for filename in files:
        if options.debian:
            try:
                check_deb(filename, options=options)
            except UnsupportedFileType:
                pass
            else:
                continue
        check_file(filename, options=options)

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
