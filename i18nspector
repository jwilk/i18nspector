#!/usr/bin/env python3
# encoding=UTF-8

# Copyright © 2012-2022 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

'''
checking tool for gettext POT, PO and MO files
'''

import os
import sys

# pylint: disable=consider-using-f-string

# ----------------------------------------

def error(message):
    try:
        import argparse  # pylint: disable=import-outside-toplevel
        ap = argparse.ArgumentParser()
        prog = ap.prog
    except ImportError:
        import optparse  # pylint: disable=deprecated-module,import-outside-toplevel
        ap = optparse.OptionParser()
        prog = ap.get_prog_name()
    message = str.join('', (prog, ': error: ', message, '\n'))
    ap.exit(1, message)

def require_python(*version):
    if sys.version_info < version:
        version_str = str.join('.', map(str, version))
        message = 'Python >= %s is required' % version_str
        error(message)

def require_polib(*version):
    import polib  # pylint: disable=import-outside-toplevel
    polib_version = tuple(
        int(x) for x in polib.__version__.split('.')
    )
    if polib_version < version:
        version_str = str.join('.', map(str, version))
        message = 'polib >= {ver} is required'.format(ver=version_str)
        error(message)

require_python(3, 6)
require_polib(1, 0, 0)

# ----------------------------------------

basedir_fallback = None
basedir = os.environ.get('I18NSPECTOR_BASEDIR', basedir_fallback)
if basedir is None:
    basedir = os.path.dirname(
        os.path.realpath(__file__)
    )
basedir = os.path.join(basedir, '')
os.stat(basedir)
sys.path[:0] = [basedir]

# pylint: disable=wrong-import-position

from lib import paths

assert os.path.samefile(basedir, paths.basedir)

from lib import cli

cli.__doc__ = (__doc__ or '').strip()
cli.main()

# vim:ts=4 sts=4 sw=4 et
