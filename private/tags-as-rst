#!/usr/bin/python3

# Copyright © 2012, 2013 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import io
import os
import re
import sys

basedir = os.path.join(
    os.path.dirname(__file__),
    os.pardir,
)
sys.path[:0] = [basedir]

from lib import tags

def output_tags_rst(tags):
    print('''\
.. This file has been generated automatically by private/tags-as-rst.
   Do not edit.
''')
    for tag in tags:
        tagname = tag.name
        print(tagname)
        print('~' * len(tagname))
        print(tag.description)
        print()
        if tag.references:
            print('References:', end='\n\n')
            for ref in tag.references:
                match = re.match(r'\A(?P<name>[\w-]+)[(](?P<section>[0-9])[)]\Z', ref)
                if match is not None:
                    ref = r'**{name}**\ ({section})'.format(**match.groupdict())
                print(' ', ref)
                print()
        print('Severity, certainty:', end='\n\n')
        print(' {}, {}'.format(tag.severity, tag.certainty))
        print()

def main():
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='UTF-8')
    output_tags_rst(tags.iter_tags())

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
