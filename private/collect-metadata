#!/usr/bin/python3

# Copyright © 2012 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import collections
import itertools
import os
import sys

import polib

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('files', metavar='<file>', nargs='*')
    ap.add_argument('--stdin', action='store_true', help='read filenames from stdin')
    options = ap.parse_args()
    metadata = collections.defaultdict(collections.Counter)
    test_cases = {}
    files = options.files
    if options.stdin:
        files = itertools.chain(
            files,
            (l.rstrip() for l in sys.stdin)
        )
    for path in files:
        print(path, end=' ... ', file=sys.stderr)
        sys.stderr.flush()
        try:
            extension = os.path.splitext(path)[-1]
            if extension == '.po':
                constructor = polib.pofile
            elif extension in ('.mo', '.gmo'):
                constructor = polib.mofile
            else:
                raise NotImplementedError(repr(extension))
            file = constructor(path)
            for k, v in file.metadata.items():
                k = k.lower()
                metadata[k][v] += 1
                test_cases[k, v] = path
            file = None
        except Exception as exc:
            print('error:', exc, file=sys.stderr)
        else:
            print('ok', file=sys.stderr)
        sys.stderr.flush()
    for key, values in metadata.items():
        print('{key!r}:'.format(key=key))
        for value, n in values.most_common():
            path = test_cases[key, value]
            print(' {n:6} {value!r}; test-case: {path!r}'.format(n=n, value=value, path=path))

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
