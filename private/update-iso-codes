#!/usr/bin/python3

# Copyright © 2012 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import datetime
import os
import sys
import xml.etree.cElementTree as etree

iso_codes_dir = '/usr/share/xml/iso-codes/';

language_blacklist = {'mis', 'mul', 'und', 'zxx', 'qaa-qtz'}

def main():
    basedir = os.path.join(
        os.path.dirname(__file__),
        os.pardir,
    )
    path = os.path.join(basedir, 'data', 'iso-codes')
    sys.stdout = open(path + '.tmp', 'wt', encoding='UTF-8')
    print('# This file has been generated automatically. Do not edit.')
    print('# Last update: {today}'.format(today=datetime.date.today()))
    print()
    iso_639 = {}
    for event, element in etree.iterparse(os.path.join(iso_codes_dir, 'iso_639.xml')):
        if element.tag != 'iso_639_entry':
            continue
        lll = element.get('iso_639_2T_code')
        if lll is None:
            raise ValueError
        if lll in language_blacklist:
            # It's not a real language, so skip.
            continue
        if len(lll) != 3:
            raise ValueError('len({!r}) != 3'.format(lll))
        ll = element.get('iso_639_1_code') or ''
        iso_639[lll] = ll
        lll_b = element.get('iso_639_2B_code')
        if lll_b is None:
            raise ValueError
        if len(lll_b) != 3:
            raise ValueError('len({!r}) != 3'.format(lll_b))
        if lll_b != lll:
            iso_639[lll_b] = ll or lll
    print('[iso-639]')
    for ll, lll in sorted(iso_639.items()):
        print('{} = {}'.format(ll, lll).rstrip())
    print()
    iso_3166 = set()
    for event, element in etree.iterparse(os.path.join(iso_codes_dir, 'iso_3166.xml')):
        if element.tag != 'iso_3166_entry':
            continue
        cc = element.get('alpha_2_code')
        if cc is None:
            raise ValueError
        iso_3166.add(cc)
    print('[iso-3166]')
    for cc in sorted(iso_3166):
        print('{} ='.format(cc))
    print()
    print('# vi''m:ft=dosini')
    sys.stdout.close()
    os.rename(path + '.tmp', path)

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
